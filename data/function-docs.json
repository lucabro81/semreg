[
  {
    "name": "regex",
    "description": "Compose a regex from an array of components",
    "params": [
      {
        "name": "components",
        "description": "The components to compose the regex from",
        "type": "RegexComposer[]"
      }
    ],
    "return": {
      "description": "A new RegExp object",
      "type": "RegExp"
    }
  },
  {
    "name": "letters",
    "description": "Matches any alphabetic character (a-z, A-Z)",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for alphabetic characters"
    }
  },
  {
    "name": "lowerLetters",
    "description": "Matches any lowercase letter (a-z)",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for lowercase letters"
    }
  },
  {
    "name": "upperLetters",
    "description": "Matches any uppercase letter (A-Z)",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for uppercase letters"
    }
  },
  {
    "name": "digits",
    "description": "Matches any numeric digit (0-9)",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for numeric digits"
    }
  },
  {
    "name": "escapeRegExp",
    "description": "Escapes special regex characters in a string",
    "params": [
      {
        "name": "str",
        "description": "String to escape",
        "type": "string"
      }
    ],
    "return": {
      "description": "Escaped string"
    }
  },
  {
    "name": "escapeRegExpExtended",
    "description": "Escapes more special regex characters in a string",
    "params": [
      {
        "name": "str",
        "description": "String to escape",
        "type": "string"
      }
    ],
    "return": {
      "description": "Escaped string"
    }
  },
  {
    "name": "literal",
    "description": "Matches the literal string provided",
    "params": [
      {
        "name": "str",
        "description": "String to match literally",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for the literal string"
    }
  },
  {
    "name": "whitespace",
    "description": "Matches any whitespace character (\\s)",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for whitespace characters"
    }
  },
  {
    "name": "nonWhitespace",
    "description": "Matches any non-whitespace character (\\S)",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for non-whitespace characters"
    }
  },
  {
    "name": "word",
    "description": "Matches any word character (alphanumeric + underscore) (\\w)",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for word characters"
    }
  },
  {
    "name": "nonWord",
    "description": "Matches any non-word character (\\W)",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for non-word characters"
    }
  },
  {
    "name": "any",
    "description": "Matches any character except newline (.)",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for any character"
    }
  },
  {
    "name": "range",
    "description": "Matches any character within the specified range",
    "params": [
      {
        "name": "from",
        "description": "Start character of the range",
        "type": "string"
      },
      {
        "name": "to",
        "description": "End character of the range",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for the character range"
    }
  },
  {
    "name": "isACharacterClass",
    "description": "",
    "params": [
      {
        "name": "pattern",
        "description": "",
        "type": "string"
      }
    ],
    "return": {
      "description": ""
    }
  },
  {
    "name": "extractCharacterClassContent",
    "description": "Extract character class content from patterns like [a-z], [0-9], etc.",
    "params": [
      {
        "name": "components",
        "description": "Components to extract from",
        "type": "RegexComposer[]"
      }
    ],
    "return": {
      "description": "Array of character class contents"
    }
  },
  {
    "name": "anyOf",
    "description": "Creates a pattern that matches any of the given components",
    "params": [
      {
        "name": "components",
        "description": "Components to match",
        "type": "RegexComposer[]"
      }
    ],
    "return": {
      "description": "RegexOperator for matching any of the components"
    }
  },
  {
    "name": "sequence",
    "description": "Creates a pattern that matches a sequence of components in order",
    "params": [
      {
        "name": "components",
        "description": "Components to match in sequence",
        "type": "RegexComposer[]"
      }
    ],
    "return": {
      "description": "RegexOperator for matching the sequence"
    }
  },
  {
    "name": "group",
    "description": "Creates a capturing group for one or more components.",
    "params": [
      {
        "name": "components",
        "description": "The patterns to include in the group",
        "type": "RegexComposer[]"
      }
    ],
    "return": {
      "description": "RegexOperator for the capturing group"
    }
  },
  {
    "name": "nonCapturingGroup",
    "description": "Creates a non-capturing group for one or more components.",
    "params": [
      {
        "name": "components",
        "description": "The patterns to include in the group",
        "type": "RegexComposer[]"
      }
    ],
    "return": {
      "description": "RegexOperator for the non-capturing group"
    }
  },
  {
    "name": "namedGroup",
    "description": "Creates a named capturing group.",
    "params": [
      {
        "name": "name",
        "description": "The name for the group (must be valid JS identifier: start with letter or _, followed by letters, digits, or _)",
        "type": "string"
      },
      {
        "name": "components",
        "description": "The patterns to include in the group",
        "type": "RegexComposer[]"
      }
    ],
    "return": {
      "description": "RegexOperator for the named capturing group"
    }
  },
  {
    "name": "numberedBackreference",
    "description": "Creates a numbered backreference (e.g., \\1, \\2).",
    "params": [
      {
        "name": "index",
        "description": "The index of the capturing group to reference (1-based)",
        "type": "number"
      }
    ],
    "return": {
      "description": "RegexOperator for the numbered backreference"
    }
  },
  {
    "name": "namedBackreference",
    "description": "Creates a named backreference (e.g., \\k<name>).",
    "params": [
      {
        "name": "name",
        "description": "The name of the capturing group to reference",
        "type": "string"
      }
    ],
    "return": {
      "description": "RegexOperator for the named backreference"
    }
  },
  {
    "name": "or",
    "description": "Creates an alternation between the specified patterns",
    "params": [
      {
        "name": "components",
        "description": "Patterns to create alternatives between",
        "type": "RegexComposer[]"
      }
    ],
    "return": {
      "description": "RegexOperator for alternation"
    }
  },
  {
    "name": "not",
    "description": "Creates a negated character set for the given component",
    "params": [
      {
        "name": "component",
        "description": "The component to negate",
        "type": "RegexComposer"
      }
    ],
    "return": {
      "description": "RegexOperator for negation"
    }
  },
  {
    "name": "startOfLine",
    "description": "Matches the start of a line (^)",
    "params": [
      {
        "name": "pattern",
        "description": "- The pattern to match",
        "type": "string"
      }
    ],
    "return": {
      "description": "The regex operator"
    }
  },
  {
    "name": "endOfLine",
    "description": "Matches the end of a line ($)",
    "params": [
      {
        "name": "pattern",
        "description": "- The pattern to match",
        "type": "string"
      }
    ],
    "return": {
      "description": "The regex operator"
    }
  },
  {
    "name": "wordBoundary",
    "description": "Matches a word boundary",
    "params": [
      {
        "name": "pattern",
        "description": "- The pattern to match",
        "type": "string"
      }
    ],
    "return": {
      "description": "The regex operator"
    }
  },
  {
    "name": "nonWordBoundary",
    "description": "Matches a non-word boundary",
    "params": [
      {
        "name": "pattern",
        "description": "- The pattern to match",
        "type": "string"
      }
    ],
    "return": {
      "description": "The regex operator"
    }
  },
  {
    "name": "startOfInput",
    "description": "Matches the start of the input, ignoring newlines",
    "params": [
      {
        "name": "pattern",
        "description": "- The pattern to match",
        "type": "string"
      }
    ],
    "return": {
      "description": "The regex operator"
    }
  },
  {
    "name": "endOfInput",
    "description": "Matches the end of the input, ignoring newlines",
    "params": [
      {
        "name": "pattern",
        "description": "- The pattern to match",
        "type": "string"
      }
    ],
    "return": {
      "description": "The regex operator"
    }
  },
  {
    "name": "atLeast",
    "description": "Specifies that the component should repeat at least n times.",
    "params": [
      {
        "name": "count",
        "description": "The minimum number of repetitions.",
        "type": "number"
      }
    ],
    "return": {
      "description": "QuantificationOptions object for use with repeat()."
    }
  },
  {
    "name": "exactly",
    "description": "Specifies that the component should repeat exactly n times.",
    "params": [
      {
        "name": "count",
        "description": "The exact number of repetitions.",
        "type": "number"
      }
    ],
    "return": {
      "description": "QuantificationOptions object for use with repeat()."
    }
  },
  {
    "name": "between",
    "description": "Specifies that the component should repeat between min and max times (inclusive).",
    "params": [
      {
        "name": "min",
        "description": "The minimum number of repetitions.",
        "type": "number"
      },
      {
        "name": "max",
        "description": "The maximum number of repetitions.",
        "type": "number"
      }
    ],
    "return": {
      "description": "QuantificationOptions object for use with repeat()."
    }
  },
  {
    "name": "isAtLeast",
    "description": "",
    "params": [
      {
        "name": "options",
        "description": "",
        "type": "QuantificationOptions"
      }
    ],
    "return": {
      "description": ""
    }
  },
  {
    "name": "isMinDifferentFromMax",
    "description": "",
    "params": [
      {
        "name": "options",
        "description": "",
        "type": "QuantificationOptions"
      }
    ],
    "return": {
      "description": ""
    }
  },
  {
    "name": "oneOrMore",
    "description": "Matches one or more occurrences of the pattern (equivalent to repeat(component, atLeast(1)))",
    "params": [
      {
        "name": "component",
        "description": "The pattern to repeat",
        "type": "RegexComposer"
      }
    ],
    "return": {
      "description": "RegexOperator for one or more occurrences"
    }
  },
  {
    "name": "zeroOrMore",
    "description": "Matches zero or more occurrences of the pattern",
    "params": [
      {
        "name": "component",
        "description": "The pattern to repeat",
        "type": "RegexComposer"
      }
    ],
    "return": {
      "description": "RegexOperator for zero or more occurrences"
    }
  },
  {
    "name": "optional",
    "description": "Makes the pattern optional (matches zero or one occurrence, equivalent to repeat(component, between(0, 1)))",
    "params": [
      {
        "name": "component",
        "description": "The pattern to make optional",
        "type": "RegexComposer"
      }
    ],
    "return": {
      "description": "RegexOperator for optional pattern"
    }
  },
  {
    "name": "repeat",
    "description": "Matches repeated occurrences of the pattern according to the specified options. Use with helper functions like atLeast(n), exactly(n), or between(min, max).",
    "params": [
      {
        "name": "component",
        "description": "The pattern to repeat",
        "type": "RegexComposer"
      },
      {
        "name": "options",
        "description": "Quantification options created by atLeast(), exactly(), or between().",
        "type": "QuantificationOptions"
      }
    ],
    "return": {
      "description": "RegexOperator for the specified repetition"
    }
  }
]